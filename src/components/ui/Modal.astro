---
import { Icon } from 'astro-icon/components';
import { twMerge } from 'tailwind-merge';

interface Props {
  /**
   * 模态框的标识符，用于动态控制模态框的开关状态。
   */
  modalName: string;

  /**
   * 是否显示关闭图标，默认为 true。
   */
  closeIcon?: boolean;

  /**
   * 外部模态框容器的自定义类名。
   */
  className?: string;

  /**
   * 模态框内部主体的自定义类名。
   */
  bodyClassName?: string;
}
const { modalName, closeIcon = true, className, bodyClassName } = Astro.props;
const isOpen = `$store.modal.isOpen('${modalName}')`;
const close = `$store.modal.close('${modalName}')`;
---

<div x-data="{}" class="flex justify-center" x-init={isOpen}>
  <!-- Modal -->
  <div
    x-show.transition={isOpen}
    style="display: none"
    x-on:keydown.escape.prevent.stop="open = false"
    role="dialog"
    aria-modal="true"
    class="fixed inset-0 z-10 overflow-y-auto"
  >
    <!-- Overlay -->
    <div
      x-show.transition={isOpen}
      x-transition.opacity
      class="fixed inset-0 bg-black bg-opacity-50"
    >
    </div>

    <!-- Panel -->
    <div
      x-show.transition={isOpen}
      x-transition
      x-on:click="open = false"
      class={twMerge(
        'relative flex min-h-screen items-center justify-center p-4',
        className
      )}
    >
      <div
        x-on:click.stop
        x-trap.noscroll.inert="open"
        class={twMerge(
          'relative w-full max-w-[53.8125rem] overflow-y-auto bg-white shadow-lg',
          bodyClassName
        )}
      >
        <div class="flex justify-end">
          <div x-show={closeIcon} x-on:click={close}>
            <slot name="close-icon">
              <Icon
                name="tabler:x"
                aria-label="button"
                class:list="absolute right-5 top-5 md:h-4 md:w-4 h-8 w-8 cursor-pointer"
              />
            </slot>
          </div>
        </div>
        <!-- body -->
        <slot />
      </div>
    </div>
  </div>
</div>
<script define:vars={{ modalName }}>
  document.addEventListener('alpine:init', () => {
    // 检查全局的 `modal` store 是否已经存在
    if (!window.Alpine.store('modal')) {
      window.Alpine.store('modal', {
        modals: {},

        // 打开指定的弹框
        open(key) {
          this.modals[key] = true;
        },

        // 关闭指定的弹框
        close(key, type) {
          if (!type) {
            sessionStorage.setItem(key, 'close');
          }
          this.modals[key] = false;
        },

        // 检查指定的弹框是否打开
        isOpen(key) {
          return this.modals[key] === true;
        },

        // 关闭所有弹框
        closeAll() {
          Object.keys(this.modals).forEach((key) => {
            this.modals[key] = false;
          });
        },
      });
    }

    // 将当前弹框的状态动态添加到 `modals`
    const modalStore = window.Alpine.store('modal');
    if (!(modalName in modalStore.modals)) {
      modalStore.modals[modalName] = false;
    }
  });
</script>
